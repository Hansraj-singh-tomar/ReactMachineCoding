
1. How can we fetch API data without using useEffect hook?
2. What are the security measures which should be considered during development?
3. Can we return setData inside a component?
4. Multiple useEffects in a same component?
5. Higher order components or custom hooks? Which approach will you follow.
6. Why do we need currying in JS? Explain with example.
7. Explain Array prototyping, generators.
8. Explain Middlewares in React which you have used?
9. Function closures and bind method difference.
10. Explain service and web workers.
11. Write a program to fetch real time data for a cricket/football match.
12. Statess components?
13. How do you fetch multiple APIs in a single time.
14. Interceptors in axios library?
15. React suspense?
16. How will you select between SSR and CSR for you application? What parameters will you consider.
17. What is A11y issues? How do you handle it?
18. Box model, CSS animation, SASS variables and mixins in CSS.
19. How authentication works with JWT?
20. What is selective hydration?
21. Crawlers, indexing a page and what are the ways?
22. Explain redux architecture.
23. How will you set redirects using axios library.
24. Different types of object creation.
25. Explain hoisting, TDZ.
26. Explain IIFE with example.
27. What is obj literal and JSON obj.
28. First class functions.
29. Error pages creation
30. Scopes in JS
31. Event Loop - Task/MicroTask Queues.
32. Second Largest numb from array without using Math, sort functions.
33. Synthetic events
34. Cookies, localStorage and sessionStorage
35. How Babel works?
36. Explain webpack, parcel and some of its features.
37. Challenges with react js
38. Memoization techniques, pure functions and pure components.
39. HTTP methods...explain
40. Call, apply and bind
41. Arrow functions, anonymous functions,this keyword
42. ES6 features.
43. Create a traingle using CSS
44. Explain rate limiting and write a small code to demonstrate.
45. ESLint and security plugins used in your proj?
46. CORS, CSP and XSS explain
47. Tree shaking, debouncing and throttling
48. Write a pgrm for form validation without using any library
49. Array operations
50. Nested array operations, flattening of an array likewise
51. Performance optimization techniques explain
52. Shallow and deep copy..explain how will you create it
53. Various hooks syntax useParam, useReducer, useQuery, useContext and many more.


// From linkdin

𝐉𝐚𝐯𝐚𝐬𝐜𝐫𝐢𝐩𝐭 
🍄 Promises ( polyfill of Promise all, race, allSettle )
🍄 Currying with example
🍄 String.prototype.repeat
🍄 Implement the compose() and pipe() polyfill .
🍄 Design patterns like singleton, factory patterns etc
🍄 Implement the publisher-subscriber pattern in javascript
🍄 Implement the map, filter, reduce, and for Each polyfill
🍄 Implement the Function.bind, call, apply method on the Function Prototype
🍄 Implement Async. parallel, Async.series which executes a set of async tasks parallel and in series
🍄 Implement Retry API with n number of
🍄 Prototype and prototype inheritance
🍄 How rendering work in the browser
🍄 Event delegation and event propagation in js
🍄 Implement Memoization
🍄 Progressive Web application
🍄 Clone an Object
🍄 Debouncing and Throttling
🍄 Implement clearAllTimeout()
🍄 Build a Promise from Scratch
🍄 Event Target — addEventListener, removeEventListener, dispatchEvent
🍄 Intersection Observe

𝐃𝐒𝐀
🍄 How does JS "this" works in different scenarios?
🍄 Remove duplicate element in an array
🍄 LRU Cache
🍄 Validate string of parentheses
🍄 3Sum/ 4sum problem
🍄 Reverse linked list
🍄 Letter Combinations of a Phone Number

// 1.  How can we fetch API data without using useEffect hook?

// first way - 
const [fetchedData, setFetchedData] = useState(false)

const someFetchFunc = asyunc (url) => {

setFetchedData(!fetchedData)

const res = await fetch(url)
const data = await res.json()
setMovieData(data)

}

!fetchedData && someFetchFunc();

// second way
import { useState } from "react";
import { IN_THEATER, POSTER } from "../../../constant/movies";
import { GlobalGet } from "../../../utilities/fetch";

const Service = () => {
  const [movieData, setMovieData] = useState({ data: null, poster: null });

  const fetchMovieData = async () => {
    try {
      let movieRes = await GlobalGet({ url: `${IN_THEATER}` });
      return movieRes;
    } catch (error) {
      console.log(error);
    }
  };

  const fetchPoster = async () => {
    try {
      let posterRes = await GlobalGet({ url: `${POSTER}` });
      return posterRes;
    } catch (error) {
      console.log(error);
    }
  };

  const fetchData = async () => {
    setMovieData({
      data: await fetchMovieData(),
      poster: await fetchPoster(),
    });
  };

  useState(() => { //<=here it is
    fetchData();
  }, []);
  return {
    movieData,
  };
};

export default Service;

Note -  useState(() => { // <-- Initializer function invoked once
            fetchData();
        }, []);